import pulp

prob = pulp.LpProblem(name="t2", sense=pulp.LpMinimize)

# A，B两个临时料场的坐标（单位：km）
xA = pulp.LpVariable('xA', lowBound=0, cat='Continuous')
yA = pulp.LpVariable('yA', lowBound=0, cat='Continuous')
xB = pulp.LpVariable('xB', lowBound=0, cat='Continuous')
yB = pulp.LpVariable('yB', lowBound=0, cat='Continuous')

# 六个建筑工地的坐标（单位：km）
JZ = [(1.25, 1.25), (8.75, 0.75), (0.5, 4.75), (5.75, 5), (3, 6.5), (7.25, 7.25)]

# A，B两个临时料场的水泥日储量
SNA = 20
SNB = 20

# 六个建筑工地的水泥日用量
SNJZ = [3, 5, 4, 7, 6, 11]

# 分别列出A，B两个临时料场到六个建筑工地的距离方程和每个建筑工地到两个临时料场的距离差值
f_A_JZ1 = ((xA - 1.25) ** 2 + (yA - 1.25) ** 2) ** 0.5
# f_A_JZ2 = ((xA - 8.75) ** 2 + (yA - 0.75) ** 2) ** 0.5
# f_A_JZ3 = ((xA - 0.5) ** 2 + (yA - 4.75) ** 2) ** 0.5
# f_A_JZ4 = ((xA - 5.75) ** 2 + (yA - 5) ** 2) ** 0.5
# f_A_JZ5 = ((xA - 3) ** 2 + (yA - 6.5) ** 2) ** 0.5
# f_A_JZ6 = ((xA - 7.25) ** 2 + (yA - 7.25) ** 2) ** 0.5
f_A_sum = ((xA - 1.25) ** 2 + (yA - 1.25) ** 2) ** 0.5 + \
          ((xA - 8.75) ** 2 + (yA - 0.75) ** 2) ** 0.5 + \
          ((xA - 0.5) ** 2 + (yA - 4.75) ** 2) ** 0.5 + \
          ((xA - 5.75) ** 2 + (yA - 5) ** 2) ** 0.5 + \
          ((xA - 3) ** 2 + (yA - 6.5) ** 2) ** 0.5 + \
          ((xA - 7.25) ** 2 + (yA - 7.25) ** 2) ** 0.5
# f_B_JZ1 = ((xB - 1.25) ** 2 + (yB - 1.25) ** 2) ** 0.5
# f_B_JZ2 = ((xB - 8.75) ** 2 + (yB - 0.75) ** 2) ** 0.5
# f_B_JZ3 = ((xB - 0.5) ** 2 + (yB - 4.75) ** 2) ** 0.5
# f_B_JZ4 = ((xB - 5.75) ** 2 + (yB - 5) ** 2) ** 0.5
# f_B_JZ5 = ((xB - 3) ** 2 + (yB - 6.5) ** 2) ** 0.5
# f_B_JZ6 = ((xB - 7.25) ** 2 + (yB - 7.25) ** 2) ** 0.5
f_B_sum = ((xB - 1.25) ** 2 + (yB - 1.25) ** 2) ** 0.5 + \
          ((xB - 8.75) ** 2 + (yB - 0.75) ** 2) ** 0.5 + \
          ((xB - 0.5) ** 2 + (yB - 4.75) ** 2) ** 0.5 + \
          ((xB - 5.75) ** 2 + (yB - 5) ** 2) ** 0.5 + \
          ((xB - 3) ** 2 + (yB - 6.5) ** 2) ** 0.5 + \
          ((xB - 7.25) ** 2 + (yB - 7.25) ** 2) ** 0.5
# f_CZ_JZ1 = f_A_JZ1 - f_B_JZ1
# f_CZ_JZ2 = f_A_JZ2 - f_B_JZ2
# f_CZ_JZ3 = f_A_JZ3 - f_B_JZ3
# f_CZ_JZ4 = f_A_JZ4 - f_B_JZ4
# f_CZ_JZ5 = f_A_JZ5 - f_B_JZ5
# f_CZ_JZ6 = f_A_JZ6 - f_B_JZ6
f_CZ_abs_sum = abs(((xA - 1.25) ** 2 + (yA - 1.25) ** 2) ** 0.5 - ((xB - 1.25) ** 2 + (yB - 1.25) ** 2) ** 0.5) + \
               abs(((xA - 8.75) ** 2 + (yA - 0.75) ** 2) ** 0.5 - ((xB - 8.75) ** 2 + (yB - 0.75) ** 2) ** 0.5) + \
               abs(((xA - 0.5) ** 2 + (yA - 4.75) ** 2) ** 0.5 - ((xB - 0.5) ** 2 + (yB - 4.75) ** 2) ** 0.5) + \
               abs(((xA - 5.75) ** 2 + (yA - 5) ** 2) ** 0.5 - ((xB - 5.75) ** 2 + (yB - 5) ** 2) ** 0.5) + \
               abs(((xA - 3) ** 2 + (yA - 6.5) ** 2) ** 0.5 - ((xB - 3) ** 2 + (yB - 6.5) ** 2) ** 0.5) + \
               abs(((xA - 7.25) ** 2 + (yA - 7.25) ** 2) ** 0.5 - ((xB - 7.25) ** 2 + (yB - 7.25) ** 2) ** 0.5)
result1 = sympy.solve(f_A_JZ1)
